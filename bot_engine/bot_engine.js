import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import axios from 'axios';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const PENDING_SELLS_FILE = path.join(__dirname, 'pending-sells.json');
const DATA_FILE = path.join(__dirname, 'data.json');

// Initialize Telegram Bot
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// Load pending sells
async function loadPendingSells() {
  try {
    const rawData = await fs.readFile(PENDING_SELLS_FILE, 'utf-8');
    return JSON.parse(rawData);
  } catch (err) {
    console.error('Error loading pending sells:', err);
    return [];
  }
}

// Load data
async function loadData() {
  try {
    const rawData = await fs.readFile(DATA_FILE, 'utf-8');
    return JSON.parse(rawData);
  } catch (err) {
    console.error('Error loading data:', err);
    return { users: [], markets: [], positions: [], transactions: [] };
  }
}

// Save pending sells
async function savePendingSells(pendingSells) {
  try {
    await fs.writeFile(PENDING_SELLS_FILE, JSON.stringify(pendingSells, null, 2));
  } catch (err) {
    console.error('Error saving pending sells:', err);
  }
}

// Save data
async function saveData(data) {
  try {
    await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2));
  } catch (err) {
    console.error('Error saving data:', err);
  }
}

// Generate ID
const generateId = () => Math.random().toString(36).substr(2, 9);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏
function updateMarketPrices(market, tradeType, quantity) {
  const LIQUIDITY_FACTOR = 0.0001;
  const currentYesPrice = market.yesPrice;
  const currentNoPrice = market.noPrice;
  
  const impact = quantity * LIQUIDITY_FACTOR;
  const maxImpact = 0.1;
  const limitedImpact = Math.sign(impact) * Math.min(Math.abs(impact), maxImpact);
  
  let newYesPrice, newNoPrice;
  
  if (tradeType === 'yes') {
    newYesPrice = Math.min(0.99, Math.max(0.01, currentYesPrice + limitedImpact));
    newNoPrice = 1 - newYesPrice;
  } else {
    newNoPrice = Math.min(0.99, Math.max(0.01, currentNoPrice + limitedImpact));
    newYesPrice = 1 - newNoPrice;
  }
  
  return {
    newYesPrice: parseFloat(newYesPrice.toFixed(4)),
    newNoPrice: parseFloat(newNoPrice.toFixed(4)),
    priceImpact: parseFloat(limitedImpact.toFixed(4))
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
function calculateFee(amount) {
  return amount * 0.02;
}

// Confirm sell transaction
async function confirmSellTransaction(requestId, adminSignature) {
  try {
    const pendingSells = await loadPendingSells();
    const sellRequest = pendingSells.find(req => req.id === requestId);
    
    if (!sellRequest) {
      throw new Error('Sell request not found');
    }

    if (sellRequest.status !== 'pending') {
      throw new Error('Request already processed');
    }

    const data = await loadData();
    const position = data.positions.find(p => p.id === sellRequest.positionId);
    const user = data.users.find(u => u.id === sellRequest.userId);
    const market = data.markets.find(m => m.id === sellRequest.marketId);

    if (!position || !user || !market) {
      throw new Error('Related data not found');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Ä—ã–Ω–∫–∞
    const newPrices = updateMarketPrices(market, sellRequest.contractType, -sellRequest.quantity);
    
    market.previousYesPrice = market.yesPrice;
    market.previousNoPrice = market.noPrice;
    market.yesPrice = newPrices.newYesPrice;
    market.noPrice = newPrices.newNoPrice;
    market.totalVolume += sellRequest.quantity;
    market.dailyVolume += sellRequest.quantity;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    position.quantity -= sellRequest.quantity;
    position.currentPrice = sellRequest.requestedPrice;
    position.lastUpdated = new Date().toISOString();
    
    if (position.quantity <= 0) {
      data.positions = data.positions.filter(p => p.id !== sellRequest.positionId);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
    market.priceHistory.push({
      timestamp: new Date().toISOString(),
      yesPrice: market.yesPrice,
      noPrice: market.noPrice,
      volume: sellRequest.quantity,
      priceImpact: newPrices.priceImpact,
      transactionType: 'sell'
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = {
      id: generateId(),
      userId: sellRequest.userId,
      marketId: sellRequest.marketId,
      type: 'sell',
      contractType: sellRequest.contractType,
      quantity: sellRequest.quantity,
      price: sellRequest.requestedPrice,
      principalAmount: sellRequest.principalAmount,
      fee: sellRequest.fee,
      netProceeds: sellRequest.netProceeds,
      adminSignature: adminSignature,
      status: 'completed',
      timestamp: new Date().toISOString(),
      newYesPrice: market.yesPrice,
      newNoPrice: market.noPrice,
      priceImpact: newPrices.priceImpact
    };
    data.transactions.push(transaction);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    sellRequest.status = 'completed';
    sellRequest.completedAt = new Date().toISOString();
    sellRequest.adminSignature = adminSignature;

    await saveData(data);
    await savePendingSells(pendingSells.filter(req => req.id !== requestId));

    return {
      success: true,
      payout: {
        amount: sellRequest.netProceeds,
        wallet: user.walletAddress,
        username: user.username
      }
    };

  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

// Cancel sell transaction
async function cancelSellTransaction(requestId, reason) {
  try {
    const pendingSells = await loadPendingSells();
    const sellRequest = pendingSells.find(req => req.id === requestId);
    
    if (!sellRequest) {
      throw new Error('Sell request not found');
    }

    if (sellRequest.status !== 'pending') {
      throw new Error('Request already processed');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    sellRequest.status = 'cancelled';
    sellRequest.cancelledAt = new Date().toISOString();
    sellRequest.cancellationReason = reason;

    await savePendingSells(pendingSells.filter(req => req.id !== requestId));

    return {
      success: true,
      requestId: requestId
    };

  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

// Format number with commas
function formatNumber(number) {
  return new Intl.NumberFormat('ru-RU', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(number);
}

// Bot commands handler
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `ü§ñ <b>–ë–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫</b>\n\n` +
    `–Ø –ø–æ–º–æ–≥–∞—é —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.\n\n` +
    `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
    `/pending - –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã\n` +
    `/help - –ü–æ–º–æ—â—å\n\n` +
    `‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n` +
    `<code>/confirm_sell_[ID]</code>\n\n` +
    `‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏:\n` +
    `<code>/cancel_sell_[ID] [–ø—Ä–∏—á–∏–Ω–∞]</code>`;
  
  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'HTML' });
});

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpMessage = `üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n` +
    `/pending - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É\n` +
    `/confirm_sell_[ID] - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /confirm_sell_abc123)\n` +
    `/cancel_sell_[ID] [–ø—Ä–∏—á–∏–Ω–∞] - –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /cancel_sell_abc123 –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)\n\n` +
    `üîç <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n` +
    `1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É\n` +
    `2. –ó–∞–ø—Ä–æ—Å –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–∏—Å—Ç–µ–º—É –æ–∂–∏–¥–∞–Ω–∏—è\n` +
    `3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n` +
    `4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç–µ —Å–¥–µ–ª–∫—É`;
  
  bot.sendMessage(chatId, helpMessage, { parse_mode: 'HTML' });
});

bot.onText(/\/pending/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const pendingSells = await loadPendingSells();
    const activeRequests = pendingSells.filter(req => req.status === 'pending');
    
    if (activeRequests.length === 0) {
      bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É');
      return;
    }
    
    let message = `üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É</b>\n\n`;
    
    activeRequests.forEach((request, index) => {
      message += `üîπ <b>–ó–∞–ø—Ä–æ—Å #${index + 1}</b>\n` +
        `üÜî ID: <code>${request.id}</code>\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${request.username}\n` +
        `üìä –†—ã–Ω–æ–∫: ${request.marketTitle}\n` +
        `üìà –¢–∏–ø: ${request.contractType.toUpperCase()}\n` +
        `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${request.quantity}\n` +
        `üíµ –¶–µ–Ω–∞: ${request.requestedPrice}\n` +
        `üí∏ –í—ã—Ä—É—á–∫–∞: ${formatNumber(request.netProceeds)} USD\n` +
        `üëõ –ö–æ—à–µ–ª–µ–∫: ${request.userWallet}\n` +
        `üïê –°–æ–∑–¥–∞–Ω: ${new Date(request.createdAt).toLocaleString('ru-RU')}\n\n` +
        `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /confirm_sell_${request.id}\n` +
        `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: /cancel_sell_${request.id}\n\n` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
    });
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤: ' + error.message);
  }
});

bot.onText(/\/confirm_sell_(.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const requestId = match[1];
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–ø–æ–¥–ø–∏—Å—å" –∞–¥–º–∏–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å—å)
    const adminSignature = `admin_sig_${generateId()}_${Date.now()}`;
    
    const result = await confirmSellTransaction(requestId, adminSignature);
    
    if (result.success) {
      const successMessage = `‚úÖ <b>–°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n` +
        `üÜî ID: <code>${requestId}</code>\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.payout.username}\n` +
        `üí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: ${formatNumber(result.payout.amount)} USD\n` +
        `üëõ –ù–∞ –∫–æ—à–µ–ª–µ–∫: ${result.payout.wallet}\n` +
        `üìù –ü–æ–¥–ø–∏—Å—å: <code>${adminSignature}</code>\n\n` +
        `üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.`;
      
      bot.sendMessage(chatId, successMessage, { parse_mode: 'HTML' });
    } else {
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${result.error}`);
    }
    
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: ' + error.message);
  }
});

bot.onText(/\/cancel_sell_(.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const fullCommand = match[0];
  const requestId = match[1];
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  const reason = fullCommand.replace(`/cancel_sell_${requestId}`, '').trim();
  
  if (!reason) {
    bot.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã: /cancel_sell_[ID] [–ø—Ä–∏—á–∏–Ω–∞]');
    return;
  }
  
  try {
    const result = await cancelSellTransaction(requestId, reason);
    
    if (result.success) {
      const cancelMessage = `‚ùå <b>–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n` +
        `üÜî ID: <code>${requestId}</code>\n` +
        `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}\n` +
        `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–º–µ–Ω–µ.`;
      
      bot.sendMessage(chatId, cancelMessage, { parse_mode: 'HTML' });
    } else {
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ${result.error}`);
    }
    
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: ' + error.message);
  }
});

// Handle all messages to catch invalid commands
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  // Ignore commands we already handle
  if (text.startsWith('/start') || text.startsWith('/help') || 
      text.startsWith('/pending') || text.startsWith('/confirm_sell_') || 
      text.startsWith('/cancel_sell_')) {
    return;
  }
  
  if (text.startsWith('/')) {
    bot.sendMessage(chatId, 
      '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
      { parse_mode: 'HTML' }
    );
  }
});

// Error handling
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

bot.on('webhook_error', (error) => {
  console.error('Webhook error:', error);
});

console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...');

// Export for use in main server
export { bot, sendTelegramNotification };

// Function to send notification (used by main server)
async function sendTelegramNotification(message) {
  try {
    await bot.sendMessage(process.env.TELEGRAM_CHAT_ID, message, { 
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
  } catch (error) {
    console.error('Error sending Telegram notification:', error.message);
  }
}