// ========================
// üßæ –û–°–ù–û–í–ù–´–ï –°–£–©–ù–û–°–¢–ò (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
// ========================
/**
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã ‚Äî —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ TON-–∫–æ—à–µ–ª—å–∫—É
 */
export interface User {
  id: string | number;
  username?: string;
  email?: string;
  balance: number;              // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –≤ USDT
  currency: Currency;
  tonWalletAddress?: string;    // üëà –ê–¥—Ä–µ—Å TON-–∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  tonConnectionStatus?: TonConnectionStatus;
  createdAt?: string;
  updatedAt?: string;
  avatarUrl?: string;
  status?: UserStatus;
}

export type Currency = 'USDT' | 'BTC' | 'ETH' | 'RUB' | 'USD' | string;

export type UserStatus = 'active' | 'suspended' | 'banned' | 'new';

export type TonConnectionStatus = 'connected' | 'disconnected' | 'connecting' | 'error';

// ========================

/**
 * –†—ã–Ω–æ–∫ (–ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç) ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export interface Market {
  id: string | number;
  title: string;
  description?: string;
  category?: string;
  yesPrice: number;
  noPrice: number;
  totalLiquidity: number;
  volume24h: number;
  endDate?: string;
  resolved?: boolean;
  resolution?: 'yes' | 'no' | 'invalid' | null;
  createdAt?: string;
  updatedAt?: string;
  tags?: string[];
  imageUrl?: string;
  status?: MarketStatus;

  // –ü–æ–ª—è –¥–ª—è OrderBook
  yesCoefficient: number;
  noCoefficient: number;
  yesChange: number;
  noChange: number;
  yesTrend: TrendType;
  noTrend: TrendType;
}

export type MarketStatus = 'active' | 'paused' | 'resolved' | 'cancelled';
export type TrendType = 'up' | 'down';

// ========================

/**
 * –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä—ã–Ω–∫–µ
 */
export interface Position {
  id: string | number;
  userId: string | number;
  marketId: string | number;
  type: 'yes' | 'no';
  quantity: number;
  purchasePrice: number;
  currentPrice: number;
  totalInvested: number;
  currentValue: number;
  unrealizedPnL: number;
  realizedPnL?: number;
  createdAt: string;
  updatedAt: string;
  closedAt?: string;
  remainingQuantity?: number;
}

// ========================
// üí∏ TON CONNECT & –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
// ========================

/**
 * –ê–¥—Ä–µ—Å –≤ —Å–µ—Ç–∏ TON
 */
export type TonAddress = string; // –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å EQ...

/**
 * –î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–∫–∞–∑–Ω—ã)
 */
export interface AppTonWallet {
  address: TonAddress;
  publicKey?: string;
  balance: number; // USDT
  lastUpdated: string;
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ TON (–≤—Ö–æ–¥—è—â–∞—è –∏–ª–∏ –∏—Å—Ö–æ–¥—è—â–∞—è)
 */
export interface TonTransaction {
  id: string; // hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  userId?: string | number; // –µ—Å–ª–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  type: 'deposit' | 'withdrawal' | 'refund' | 'payout';
  status: TransactionStatus;
  amount: number; // –≤ USDT
  currency: 'USDT'; // –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ USDT, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
  tonAmountNano?: string; // —Å—É–º–º–∞ –≤ –Ω–∞–Ω–æ—Ç–æ–∫–µ–Ω–∞—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  fromAddress: TonAddress;
  toAddress: TonAddress;
  comment?: string; // –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ #123"
  txHash?: string;
  createdAt: string;
  confirmedAt?: string;
  error?: string;
  metadata?: Record<string, any>; // –Ω–∞–ø—Ä–∏–º–µ—Ä: { contractId: '1', marketId: '5' }
}

export type TransactionStatus = 
  | 'pending'     // –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
  | 'confirmed'   // —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  | 'failed'      // –æ—à–∏–±–∫–∞
  | 'cancelled';  // –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

/**
 * Payload –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ TON Connect
 */
export interface TonTransferPayload {
  to: TonAddress;
  amount: string; // –≤ –Ω–∞–Ω–æ—Ç–æ–∫–µ–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1000000000" = 1 USDT)
  comment?: string;
  stateInit?: string; // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫
  validUntil?: number; // timestamp
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ TON Connect –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
export interface TonConnectState {
  connected: boolean;
  walletAddress: TonAddress | null;
  walletName?: string; // "Tonkeeper", "MyTonWallet" –∏ —Ç.–¥.
  network: 'mainnet' | 'testnet';
  balance: number; // USDT
  lastSync: Date | null;
  error: string | null;
  connecting: boolean;
}

/**
 * –ü—Ä–æ–ø—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ TON Connect
 */
export interface TonConnectButtonProps {
  onConnect?: (address: TonAddress, name?: string) => void;
  onDisconnect?: () => void;
  onError?: (error: string) => void;
  network?: 'mainnet' | 'testnet';
  className?: string;
}

// ========================
// üîÑ API PAYLOADS (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
// ========================

export interface BuyContractPayload {
  userId: string | number;
  marketId: string | number;
  type: 'yes' | 'no';
  quantity: number;
  offerPrice: number;
  slippageTolerance?: number;
  expiresAt?: string;
  // üëá –°–≤—è–∑—å —Å TON
  paymentMethod?: 'internal' | 'ton_usdt';
  tonTxHash?: string; // –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TON
}

export interface SellContractPayload {
  userId: string | number;
  positionId: string | number;
  quantity: number;
  sellPrice: number;
  slippageTolerance?: number;
  expiresAt?: string;
  // üëá –î–ª—è –≤—ã–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ TON
  payoutToTon?: boolean;
  tonWalletAddress?: TonAddress;
}

// ========================
// üì¶ API RESPONSES (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
// ========================

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  timestamp?: string;
}

export interface PaginatedResponse<T> {
  items: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

// ========================
// üéõ –°–û–°–¢–û–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
// ========================

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ TradeInterfaceBlue ‚Äî —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TON
 */
export interface TradeState {
  activeMenu: 'buy' | 'sell';
  prediction: 'yes' | 'no' | null;
  betAmount: number;
  modalVisible: boolean;
  offerPrice: number;
  sellAmount: number;
  sellPrice: number;
  potentialProfit: number;
  market: Market | null;
  user: User | null;
  purchasedContracts: Position[];
  selectedPosition: Position | null;
  sellProfit: {
    usdt: number;
    percent: number;
    currency: Currency;
  };
  error: string | null;
  isLoading: boolean;
  availableBalance: number;
  // üëá TON-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
  tonConnectState: TonConnectState;
  pendingTransaction: TonTransaction | null;
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ DarkBlueGradientChart ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export interface ChartState {
  data: ChartSeriesData[];
  rawData: MonthlyLiquidityRaw[];
  loading: boolean;
  error: string | null;
  selectedMarketId?: string | number;
  dateRange?: {
    from: string;
    to: string;
  };
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ OrderBook ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export interface OrderBookState {
  outcomes: OutcomeRow[];
  lastUpdated: Date;
  isUpdating: boolean;
  market: Market | null;
}

// ========================
// üì• –ü–†–û–ü–°–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ)
// ========================

export interface TradeInterfaceBlueProps {
  userId?: string | number;
  marketId?: string | number;
  initialPrediction?: 'yes' | 'no';
  onTradeSuccess?: (trade: { type: 'buy' | 'sell'; amount: number; txHash?: string }) => void;
  theme?: 'light' | 'dark';
  showHeader?: boolean;
  compact?: boolean;
  // üëá TON
  onTonConnect?: () => void;
  tonConnected?: boolean;
}

export interface DarkBlueGradientChartProps {
  userId?: string | number;
  marketId?: string | number;
  title?: string;
  height?: number;
  config?: ChartConfig;
  onDataLoaded?: (data: ChartSeriesData[]) => void;
  onError?: (error: string) => void;
  dateRange?: ChartState['dateRange'];
  showLegend?: boolean;
  interactive?: boolean;
}

export interface OrderBookProps {
  marketId?: string | number;
  autoRefreshInterval?: number;
  showDescription?: boolean;
  showEventInfo?: boolean;
  onMarketUpdate?: (market: Market) => void;
  compact?: boolean;
}

// ========================
// üìä –ì–†–ê–§–ò–ö–ò: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// ========================

export interface MonthlyLiquidityRaw {
  month: string;
  year?: number;
  yes: number;
  no: number;
  total?: number;
}

export interface ChartSeriesData {
  month: string;
  year?: number;
  value: number;
  type: '–î–ê' | '–ù–ï–¢';
  marketId?: string | number;
  marketTitle?: string;
}

export interface ChartConfig {
  title?: string;
  height?: number;
  showArea?: boolean;
  showPoints?: boolean;
  colorScheme?: [string, string];
  currency?: Currency;
  tooltipFormatter?: (datum: ChartSeriesData) => string;
  xAxisLabelFormatter?: (month: string) => string;
}

// ========================
// üìà OrderBook ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// ========================

export interface OutcomeRow {
  id: 'yes' | 'no';
  outcome: '–î–∞' | '–ù–µ—Ç';
  price: number;
  change: number;
  trend: TrendType;
}

// ========================
// üß© –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –¢–ò–ü–´
// ========================

export type PredictionType = 'yes' | 'no';
export type TradeMenu = 'buy' | 'sell';
export type TradeAction = 'buy' | 'sell' | 'close' | 'cancel';

export type SortOrder = 'asc' | 'desc';
export type SortBy = 'price' | 'quantity' | 'pnl' | 'date';

export interface FilterOptions {
  marketIds?: (string | number)[];
  types?: ('yes' | 'no')[];
  minPrice?: number;
  maxPrice?: number;
  startDate?: string;
  endDate?: string;
}

// ========================
// üìà –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò
// ========================

export interface MarketAnalytics {
  marketId: string | number;
  avgYesPrice: number;
  avgNoPrice: number;
  volatility: number;
  tradeCount: number;
  uniqueTraders: number;
}

export interface UserPerformance {
  userId: string | number;
  totalPnL: number;
  winRate: number;
  avgProfit: number;
  avgLoss: number;
  maxDrawdown: number;
  monthlyBreakdown: MonthlyLiquidityRaw[];
}